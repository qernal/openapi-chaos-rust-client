/*
 * Chaos
 *
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 * Generated by: https://openapi-generator.tech
 */

/// Host : Host response



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Host {
    /// Host id
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// Hostname, this can be a root or a subdomain
    #[serde(rename = "host")]
    pub host: String,
    /// The secret reference to the certificate
    #[serde(rename = "certificate", skip_serializing_if = "Option::is_none")]
    pub certificate: Option<String>,
    /// Project ID this is attached to
    #[serde(rename = "project_id")]
    pub project_id: uuid::Uuid,
    /// If the host is read only and cannot be removed, primarily used for *.qrnl.app domains
    #[serde(rename = "read_only")]
    pub read_only: bool,
    /// If the host is disabled and so won't be routable
    #[serde(rename = "disabled")]
    pub disabled: bool,
    /// TXT record of host to verify ownership - if this record is removed, it may become unverified as this is checked periodically to continually verify ownership
    #[serde(rename = "txt_verification")]
    pub txt_verification: String,
    /// UTC datetime when the host was verified (ISO 8601 date format).
    #[serde(rename = "verified_at", skip_serializing_if = "Option::is_none")]
    pub verified_at: Option<String>,
    #[serde(rename = "date")]
    pub date: Box<models::Date>,
    #[serde(rename = "verification_status")]
    pub verification_status: models::HostVerificationStatus,
}

impl Host {
    /// Host response
    pub fn new(id: uuid::Uuid, host: String, project_id: uuid::Uuid, read_only: bool, disabled: bool, txt_verification: String, date: models::Date, verification_status: models::HostVerificationStatus) -> Host {
        Host {
            id,
            host,
            certificate: None,
            project_id,
            read_only,
            disabled,
            txt_verification,
            verified_at: None,
            date: Box::new(date),
            verification_status,
        }
    }
}


