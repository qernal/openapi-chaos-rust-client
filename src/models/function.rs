/*
 * Chaos
 *
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 * Generated by: https://openapi-generator.tech
 */

/// Function : Function

#[allow(unused_imports)]
use crate::models;



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Function {
    /// ID of the function
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// ID of the project this function belongs to
    #[serde(rename = "project_id")]
    pub project_id: uuid::Uuid,
    /// Function spec version
    #[serde(rename = "version")]
    pub version: Version,
    /// Name of the function
    #[serde(rename = "name")]
    pub name: String,
    /// Description of what the function does
    #[serde(rename = "description")]
    pub description: String,
    /// Path to container image
    #[serde(rename = "image")]
    pub image: String,
    /// Function revision
    #[serde(rename = "revision")]
    pub revision: uuid::Uuid,
    #[serde(rename = "type")]
    pub r#type: models::FunctionType,
    #[serde(rename = "size")]
    pub size: Box<models::FunctionSize>,
    /// Port the application runs on
    #[serde(rename = "port")]
    pub port: i32,
    /// The public route/path to this function, only applicable to http type functions
    #[serde(rename = "routes", skip_serializing_if = "Option::is_none")]
    pub routes: Option<Vec<models::FunctionRoute>>,
    #[serde(rename = "scaling")]
    pub scaling: Box<models::FunctionScaling>,
    /// List of deployments for this function
    #[serde(rename = "deployments")]
    pub deployments: Vec<models::FunctionDeployment>,
    /// List of environment variables for secrets
    #[serde(rename = "secrets")]
    pub secrets: Vec<models::FunctionEnv>,
    /// Tags to limit deployment
    #[serde(rename = "compliance")]
    pub compliance: Vec<models::FunctionCompliance>,
}

impl Function {
    /// Function
    pub fn new(id: uuid::Uuid, project_id: uuid::Uuid, version: Version, name: String, description: String, image: String, revision: uuid::Uuid, r#type: models::FunctionType, size: models::FunctionSize, port: i32, scaling: models::FunctionScaling, deployments: Vec<models::FunctionDeployment>, secrets: Vec<models::FunctionEnv>, compliance: Vec<models::FunctionCompliance>) -> Function {
        Function {
            id,
            project_id,
            version,
            name,
            description,
            image,
            revision,
            r#type,
            size: Box::new(size),
            port,
            routes: None,
            scaling: Box::new(scaling),
            deployments,
            secrets,
            compliance,
        }
    }
}

/// Function spec version
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Version {
    #[serde(rename = "1.0.0")]
    Variant1Period0Period0,
}

impl Default for Version {
    fn default() -> Version {
        Self::Variant1Period0Period0
    }
}

