/*
 * Chaos
 *
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 * Generated by: https://openapi-generator.tech
 */

/// MetricResourceAggregationResourcesBucketsInnerHistogramBucketsInnerCounter : Counter (monotonically incrementing)

#[allow(unused_imports)]
use crate::models;



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MetricResourceAggregationResourcesBucketsInnerHistogramBucketsInnerCounter {
    /// Average counter value
    #[serde(rename = "avg", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub avg: Option<Option<f64>>,
    /// Number of counter values
    #[serde(rename = "count", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub count: Option<Option<i32>>,
    /// Maximum counter value
    #[serde(rename = "max", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max: Option<Option<f64>>,
    /// Minimum counter value
    #[serde(rename = "min", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub min: Option<Option<f64>>,
    /// Sum of counter values
    #[serde(rename = "sum", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sum: Option<Option<f64>>,
}

impl MetricResourceAggregationResourcesBucketsInnerHistogramBucketsInnerCounter {
    /// Counter (monotonically incrementing)
    pub fn new() -> MetricResourceAggregationResourcesBucketsInnerHistogramBucketsInnerCounter {
        MetricResourceAggregationResourcesBucketsInnerHistogramBucketsInnerCounter {
            avg: None,
            count: None,
            max: None,
            min: None,
            sum: None,
        }
    }
}


