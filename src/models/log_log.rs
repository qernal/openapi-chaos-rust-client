/*
 * Chaos
 *
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 * Generated by: https://openapi-generator.tech
 */

/// LogLog : Log item

#[allow(unused_imports)]
use crate::models;



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LogLog {
    /// Which log stream
    #[serde(rename = "stream", skip_serializing_if = "Option::is_none")]
    pub stream: Option<Stream>,
    /// If this was an event on the function or a log line
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<Kind>,
    /// An array of labels
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<String>>,
    /// Log line type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// Log line
    #[serde(rename = "line", skip_serializing_if = "Option::is_none")]
    pub line: Option<String>,
    /// The date/time that this log was generated
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}

impl LogLog {
    /// Log item
    pub fn new() -> LogLog {
        LogLog {
            stream: None,
            kind: None,
            labels: None,
            r#type: None,
            line: None,
            timestamp: None,
        }
    }
}

/// Which log stream
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Stream {
    #[serde(rename = "stdout")]
    Stdout,
    #[serde(rename = "stderr")]
    Stderr,
}

impl Default for Stream {
    fn default() -> Stream {
        Self::Stdout
    }
}
/// If this was an event on the function or a log line
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Kind {
    #[serde(rename = "event")]
    Event,
    #[serde(rename = "log")]
    Log,
}

impl Default for Kind {
    fn default() -> Kind {
        Self::Event
    }
}
/// Log line type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "error")]
    Error,
}

impl Default for Type {
    fn default() -> Type {
        Self::Info
    }
}

