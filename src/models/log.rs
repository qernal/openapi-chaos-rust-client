/*
 * Chaos
 *
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 * Generated by: https://openapi-generator.tech
 */

/// Log : List of logs

#[allow(unused_imports)]
use crate::models;



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Log {
    /// Container ID the log line is for
    #[serde(rename = "container", skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    /// Function ID the log line is for
    #[serde(rename = "function", skip_serializing_if = "Option::is_none")]
    pub function: Option<uuid::Uuid>,
    /// Project ID the log line is for
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<uuid::Uuid>,
    /// Organisation ID the log line is for
    #[serde(rename = "organisation", skip_serializing_if = "Option::is_none")]
    pub organisation: Option<uuid::Uuid>,
    /// Group ID the log line is for
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "log", skip_serializing_if = "Option::is_none")]
    pub log: Option<Box<models::LogLog>>,
}

impl Log {
    /// List of logs
    pub fn new() -> Log {
        Log {
            container: None,
            function: None,
            project: None,
            organisation: None,
            group: None,
            log: None,
        }
    }
}


