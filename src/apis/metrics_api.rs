/*
 * Chaos
 *
 * Central Management API - publicly exposed set of APIs for managing deployments
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qernal.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::models;
use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`metrics_aggregations_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MetricsAggregationsListError {
    Status400(models::BadRequestResponse),
    UnknownValue(serde_json::Value),
}


/// Retrieve metrics for a specific project or function. Use the query parameter to request a metrics report.  > Note: Metrics are always returned in a descending order based on the timestamp. 
pub async fn metrics_aggregations_list(configuration: &configuration::Configuration, metric_type: &str, page: Option<crate::models::OrganisationsListPageParameter>, f_project: Option<&str>, f_function: Option<&str>, f_timestamps: Option<crate::models::LogsListFTimestampsParameter>, f_histogram_interval: Option<i32>) -> Result<models::MetricsAggregationsList200Response, Error<MetricsAggregationsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/metrics/aggregations/{metric_type}", local_var_configuration.base_path, metric_type=crate::apis::urlencode(metric_type));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page {
        #[derive(Serialize)]
        struct LocalStructDeepOrganisationsListPageParameter<'a> {
            r#page: &'a crate::models::OrganisationsListPageParameter,
        }
        let local_deep_struct = LocalStructDeepOrganisationsListPageParameter{ r#page: local_var_str };
        // let params = crate::apis::parse_deep_object("page", local_var_str);
        let params = crate::query_to_pairs(&local_deep_struct);
        local_var_req_builder = local_var_req_builder.query(&params);
    }
    if let Some(ref local_var_str) = f_project {
        local_var_req_builder = local_var_req_builder.query(&[("f_project", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f_function {
        local_var_req_builder = local_var_req_builder.query(&[("f_function", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = f_timestamps {
        #[derive(Serialize)]
        struct LocalStructDeepLogsListFTimestampsParameter<'a> {
            r#f_timestamps: &'a crate::models::LogsListFTimestampsParameter,
        }
        let local_deep_struct = LocalStructDeepLogsListFTimestampsParameter{ r#f_timestamps: local_var_str };
        // let params = crate::apis::parse_deep_object("f_timestamps", local_var_str);
        let params = crate::query_to_pairs(&local_deep_struct);
        local_var_req_builder = local_var_req_builder.query(&params);
    }
    if let Some(ref local_var_str) = f_histogram_interval {
        local_var_req_builder = local_var_req_builder.query(&[("f_histogram_interval", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    // FIXME: Remove after template fix
    // dbg!(&local_var_req);
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MetricsAggregationsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

