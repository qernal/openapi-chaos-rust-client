/*
 * Chaos
 *
 * Management API (Central System)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `delete_clusters_cluster_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteClustersClusterIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_projects_project_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteProjectsProjectIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_projects_project_id_functions_function_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteProjectsProjectIdFunctionsFunctionIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_clusters`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetClustersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_clusters_cluster_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetClustersClusterIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_projects`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProjectsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_projects_project_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProjectsProjectIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_projects_project_id_functions`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProjectsProjectIdFunctionsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_projects_project_id_functions_function_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProjectsProjectIdFunctionsFunctionIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_system_health`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSystemHealthError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `post_clsuters_register`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostClsutersRegisterError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `post_deployments`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostDeploymentsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `post_projects`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostProjectsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `put_clusters_cluster_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutClustersClusterIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `put_projects_project_id_functions_function_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutProjectsProjectIdFunctionsFunctionIdError {
    UnknownValue(serde_json::Value),
}


/// Delete the cluster
pub async fn delete_clusters_cluster_id(configuration: &configuration::Configuration, cluster_id: &str) -> Result<(), Error<DeleteClustersClusterIdError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/clusters/{cluster-id}", configuration.base_path, cluster-id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteClustersClusterIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a project and all of its functions
pub async fn delete_projects_project_id(configuration: &configuration::Configuration, project_id: &str) -> Result<(), Error<DeleteProjectsProjectIdError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/projects/{project-id}", configuration.base_path, project-id=crate::apis::urlencode(project_id));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteProjectsProjectIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete specific function
pub async fn delete_projects_project_id_functions_function_id(configuration: &configuration::Configuration, project_id: &str, function_id: &str) -> Result<(), Error<DeleteProjectsProjectIdFunctionsFunctionIdError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/projects/{project-id}/functions/{function-id}", configuration.base_path, project-id=crate::apis::urlencode(project_id), function-id=crate::apis::urlencode(function_id));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteProjectsProjectIdFunctionsFunctionIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get all the clusters currently linked
pub async fn get_clusters(configuration: &configuration::Configuration, ) -> Result<(), Error<GetClustersError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/clusters", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<GetClustersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a specific cluster
pub async fn get_clusters_cluster_id(configuration: &configuration::Configuration, cluster_id: &str) -> Result<(), Error<GetClustersClusterIdError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/clusters/{cluster-id}", configuration.base_path, cluster-id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<GetClustersClusterIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get all the projects for that account
pub async fn get_projects(configuration: &configuration::Configuration, ) -> Result<(), Error<GetProjectsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/projects", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<GetProjectsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a specific project with all its functions
pub async fn get_projects_project_id(configuration: &configuration::Configuration, project_id: &str) -> Result<(), Error<GetProjectsProjectIdError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/projects/{project-id}", configuration.base_path, project-id=crate::apis::urlencode(project_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<GetProjectsProjectIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get the functions of a project
pub async fn get_projects_project_id_functions(configuration: &configuration::Configuration, project_id: &str) -> Result<(), Error<GetProjectsProjectIdFunctionsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/projects/{project-id}/functions", configuration.base_path, project-id=crate::apis::urlencode(project_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<GetProjectsProjectIdFunctionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a specific function
pub async fn get_projects_project_id_functions_function_id(configuration: &configuration::Configuration, project_id: &str, function_id: &str) -> Result<(), Error<GetProjectsProjectIdFunctionsFunctionIdError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/projects/{project-id}/functions/{function-id}", configuration.base_path, project-id=crate::apis::urlencode(project_id), function-id=crate::apis::urlencode(function_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<GetProjectsProjectIdFunctionsFunctionIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get health of Chaos
pub async fn get_system_health(configuration: &configuration::Configuration, ) -> Result<(), Error<GetSystemHealthError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/system/health", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<GetSystemHealthError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Register a new cluster into the system
pub async fn post_clsuters_register(configuration: &configuration::Configuration, ) -> Result<(), Error<PostClsutersRegisterError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/clusters", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<PostClsutersRegisterError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deployments can contain more than one project with many functions in - it allows you to deploy an entire API in one go rather than individual functions
pub async fn post_deployments(configuration: &configuration::Configuration, inline_object: Option<Vec<crate::models::InlineObject>>) -> Result<(), Error<PostDeploymentsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/deployments", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&inline_object);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<PostDeploymentsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new project
pub async fn post_projects(configuration: &configuration::Configuration, ) -> Result<(), Error<PostProjectsError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/projects", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<PostProjectsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update cluster
pub async fn put_clusters_cluster_id(configuration: &configuration::Configuration, cluster_id: &str) -> Result<(), Error<PutClustersClusterIdError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/clusters/{cluster-id}", configuration.base_path, cluster-id=crate::apis::urlencode(cluster_id));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<PutClustersClusterIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update a specific function
pub async fn put_projects_project_id_functions_function_id(configuration: &configuration::Configuration, project_id: &str, function_id: &str) -> Result<(), Error<PutProjectsProjectIdFunctionsFunctionIdError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/projects/{project-id}/functions/{function-id}", configuration.base_path, project-id=crate::apis::urlencode(project_id), function-id=crate::apis::urlencode(function_id));
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<PutProjectsProjectIdFunctionsFunctionIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

