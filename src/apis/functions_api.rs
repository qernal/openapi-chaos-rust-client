/*
 * Chaos
 *
 * Management API - Central user exposed system
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@qernal.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct FunctionsApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> FunctionsApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> FunctionsApiClient<C> {
        FunctionsApiClient {
            configuration,
        }
    }
}

pub trait FunctionsApi {
    fn delete_projects_project_id_functions_function_id(&self, project_id: &str, function_id: &str) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
    fn get_projects_project_id_functions(&self, project_id: &str) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::GetProjectFunctionsSuccessResponseSchemaInner>, Error>>>>;
    fn get_projects_project_id_functions_function_id(&self, project_id: &str, function_id: &str) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
    fn post_projects_project_id_functions(&self, project_id: &str, create_project_functions_request_body_schema: Option<crate::models::CreateProjectFunctionsRequestBodySchema>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
    fn put_projects_project_id_functions_function_id(&self, project_id: &str, function_id: &str, body: Option<serde_json::Value>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
}

impl<C: hyper::client::connect::Connect>FunctionsApi for FunctionsApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn delete_projects_project_id_functions_function_id(&self, project_id: &str, function_id: &str) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/projects/{project-id}/functions/{function-id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("project-id".to_string(), project_id.to_string());
        req = req.with_path_param("function-id".to_string(), function_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_projects_project_id_functions(&self, project_id: &str) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::GetProjectFunctionsSuccessResponseSchemaInner>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/projects/{project-id}/functions".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("project-id".to_string(), project_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_projects_project_id_functions_function_id(&self, project_id: &str, function_id: &str) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/projects/{project-id}/functions/{function-id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("project-id".to_string(), project_id.to_string());
        req = req.with_path_param("function-id".to_string(), function_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn post_projects_project_id_functions(&self, project_id: &str, create_project_functions_request_body_schema: Option<crate::models::CreateProjectFunctionsRequestBodySchema>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/projects/{project-id}/functions".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("project-id".to_string(), project_id.to_string());
        req = req.with_body_param(create_project_functions_request_body_schema);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn put_projects_project_id_functions_function_id(&self, project_id: &str, function_id: &str, body: Option<serde_json::Value>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/projects/{project-id}/functions/{function-id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("project-id".to_string(), project_id.to_string());
        req = req.with_path_param("function-id".to_string(), function_id.to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

}
