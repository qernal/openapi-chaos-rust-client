/*
 * Chaos
 *
 * Management API - Central user exposed system
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@qernal.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ProvidersApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> ProvidersApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ProvidersApiClient<C> {
        ProvidersApiClient {
            configuration,
        }
    }
}

pub trait ProvidersApi {
    fn get_providers(&self, ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::GetProvidersSuccessResponseSchemaInner>, Error>>>>;
}

impl<C: hyper::client::connect::Connect>ProvidersApi for ProvidersApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn get_providers(&self, ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::GetProvidersSuccessResponseSchemaInner>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/providers".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

}
