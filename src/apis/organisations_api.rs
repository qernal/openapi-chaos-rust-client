/*
 * Chaos
 *
 * Management API - Central user exposed system
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@qernal.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct OrganisationsApiClient<C: hyper::client::connect::Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect> OrganisationsApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> OrganisationsApiClient<C> {
        OrganisationsApiClient {
            configuration,
        }
    }
}

pub trait OrganisationsApi {
    fn delete_organisations_org_id(&self, org_id: &str) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
    fn get_organisations(&self, ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::GetOrganisations200ResponseInner>, Error>>>>;
    fn get_organisations_org_id(&self, org_id: &str) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
    fn post_organisations(&self, body: Option<serde_json::Value>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
    fn put_organisations_org_id(&self, org_id: &str, body: Option<serde_json::Value>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>>;
}

impl<C: hyper::client::connect::Connect>OrganisationsApi for OrganisationsApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn delete_organisations_org_id(&self, org_id: &str) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/organisations/{org-id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("org-id".to_string(), org_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_organisations(&self, ) -> Pin<Box<dyn Future<Output = Result<Vec<crate::models::GetOrganisations200ResponseInner>, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/organisations".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_organisations_org_id(&self, org_id: &str) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/organisations/{org-id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("org-id".to_string(), org_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn post_organisations(&self, body: Option<serde_json::Value>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/organisations".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn put_organisations_org_id(&self, org_id: &str, body: Option<serde_json::Value>) -> Pin<Box<dyn Future<Output = Result<serde_json::Value, Error>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/organisations/{org-id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("org-id".to_string(), org_id.to_string());
        req = req.with_body_param(body);

        req.execute(self.configuration.borrow())
    }

}
